"use server";

import { Client } from '@line/bot-sdk';
import { db } from '@/app/lib/firebaseAdmin'; // 1. Import db ‡∏à‡∏≤‡∏Å Admin SDK
import { collection, getDocs, query, where, doc, getDoc } from 'firebase/firestore';

const client = new Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
});

/**
 * Check if notifications are enabled
 */
async function getNotificationSettings() {
  try {
    const settingsRef = db.collection('settings').doc('notifications');
    const settingsDoc = await settingsRef.get();
    
    if (settingsDoc.exists()) {
      const data = settingsDoc.data();
      return data.lineNotifications || {
        enabled: true,
        newBooking: true,
        bookingCancelled: true,
        bookingModified: true,
        paymentReceived: true,
        reminderNotifications: true
      };
    }
    
    // Default settings if document doesn't exist
    return {
      enabled: true,
      newBooking: true,
      bookingCancelled: true,
      bookingModified: true,
      paymentReceived: true,
      reminderNotifications: true
    };
  } catch (error) {
    console.error('Error fetching notification settings:', error);
    // Return default settings on error
    return {
      enabled: true,
      newBooking: true,
      bookingCancelled: true,
      bookingModified: true,
      paymentReceived: true,
      reminderNotifications: true
    };
  }
}

/**
 * Sends a push message to a single LINE user.
 */
export async function sendLineMessage(to, messageText) {
  if (!to || !messageText) {
    console.error("Missing 'to' or 'messageText'");
    return { success: false, error: "Missing recipient or message." };
  }
  try {
    const messageObject = { type: 'text', text: messageText };
    await client.pushMessage(to, messageObject);
    return { success: true };
  } catch (error) {
    console.error(`Failed to send message to ${to}:`, error.originalError?.response?.data || error);
    return { success: false, error: 'Failed to send message' };
  }
}

/**
 * (‡πÉ‡∏´‡∏°‡πà) Sends a push message to all registered admins.
 * @param {string} messageText - The text message to send.
 * @returns {Promise<{success: boolean, error?: string}>} - The result of the operation.
 */
export async function sendLineMessageToAllAdmins(messageText) {
  try {
    // Check if notifications are enabled
    const notificationSettings = await getNotificationSettings();
    if (!notificationSettings.enabled) {
      console.log("LINE notifications are disabled");
      return { success: true, message: "Notifications disabled" };
    }

    // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Firestore
    const adminsQuery = query(db.collection('admins'), where("lineUserId", "!=", null));
    const adminSnapshot = await adminsQuery.get();

    if (adminSnapshot.empty) {
      console.warn("No admins with lineUserId found to notify.");
      return { success: true, message: "No admins to notify." };
    }

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    const notificationPromises = adminSnapshot.docs.map(doc => {
      const admin = doc.data();
      return sendLineMessage(admin.lineUserId, messageText);
    });

    // 4. ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    await Promise.all(notificationPromises);

    console.log(`Successfully sent notifications to ${adminSnapshot.size} admins.`);
    return { success: true };

  } catch (error) {
    console.error('Error sending message to all admins:', error);
    return { success: false, error: 'Failed to send message to admins' };
  }
}

/**
 * Send booking notification to admins
 */
export async function sendBookingNotification(bookingData, notificationType) {
  try {
    const notificationSettings = await getNotificationSettings();
    
    // Check if notifications are enabled and this specific type is enabled
    if (!notificationSettings.enabled || !notificationSettings[notificationType]) {
      console.log(`${notificationType} notifications are disabled`);
      return { success: true, message: "Notification type disabled" };
    }

    let message = '';
    const { customerName, serviceName, appointmentDate, appointmentTime, totalPrice } = bookingData;
    
    switch (notificationType) {
      case 'newBooking':
        message = `üÜï ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà\n` +
                 `üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerName}\n` +
                 `üíÖ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${serviceName}\n` +
                 `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${appointmentDate}\n` +
                 `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${appointmentTime}\n` +
                 `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${totalPrice} ‡∏ö‡∏≤‡∏ó`;
        break;
        
      case 'bookingCancelled':
        message = `‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n` +
                 `üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerName}\n` +
                 `üíÖ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${serviceName}\n` +
                 `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${appointmentDate}\n` +
                 `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${appointmentTime}`;
        break;
        
      case 'bookingModified':
        message = `‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n` +
                 `üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerName}\n` +
                 `üíÖ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${serviceName}\n` +
                 `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: ${appointmentDate}\n` +
                 `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà: ${appointmentTime}`;
        break;
        
      case 'paymentReceived':
        message = `üí≥ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô\n` +
                 `üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerName}\n` +
                 `üíÖ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${serviceName}\n` +
                 `üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${totalPrice} ‡∏ö‡∏≤‡∏ó\n` +
                 `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: ${appointmentDate} ${appointmentTime}`;
        break;
        
      default:
        message = messageText || '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß';
    }

    return await sendLineMessageToAllAdmins(message);

  } catch (error) {
    console.error('Error sending booking notification:', error);
    return { success: false, error: 'Failed to send booking notification' };
  }
}

/**
 * Send reminder notification to customer
 */
export async function sendReminderNotification(customerLineId, bookingData) {
  try {
    const notificationSettings = await getNotificationSettings();
    
    if (!notificationSettings.enabled || !notificationSettings.reminderNotifications) {
      console.log("Reminder notifications are disabled");
      return { success: true, message: "Reminder notifications disabled" };
    }

    if (!customerLineId) {
      console.log("Customer LINE ID not provided");
      return { success: false, error: "No customer LINE ID" };
    }

    const { serviceName, appointmentDate, appointmentTime, shopName = '‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏ß‡∏¢' } = bookingData;
    
    const message = `üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢\n\n` +
                   `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏≠‡∏µ‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß\n\n` +
                   `üíÖ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${serviceName}\n` +
                   `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${appointmentDate}\n` +
                   `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${appointmentTime}\n` +
                   `üè™ ${shopName}\n\n` +
                   `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‚ú®`;

    return await sendLineMessage(customerLineId, message);

  } catch (error) {
    console.error('Error sending reminder notification:', error);
    return { success: false, error: 'Failed to send reminder notification' };
  }
}
