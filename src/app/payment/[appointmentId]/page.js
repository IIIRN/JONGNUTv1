// src/app/payment/[appointmentId]/page.js
"use client";

import React, { useState, useEffect, Suspense } from 'react';
import { useParams } from 'next/navigation';
import { useLiffContext } from '@/context/LiffProvider';
import { db } from '@/app/lib/firebase';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { generateQrCodePayload } from '@/app/actions/paymentActions';
import { updatePaymentStatus } from '@/app/actions/paymentActions';
import Image from 'next/image';

function PaymentContent() {
    const { liff, profile, loading: liffLoading } = useLiffContext();
    const [appointment, setAppointment] = useState(null);
    const [qrCodeDataUrl, setQrCodeDataUrl] = useState('');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [paymentStatus, setPaymentStatus] = useState('unpaid');
    const [isProcessing, setIsProcessing] = useState(false);
    const params = useParams();
    const appointmentId = params.appointmentId;

    useEffect(() => {
        if (!appointmentId) {
            setError('‡πÑ‡∏°‡πà‡∏û‡∏ö Appointment ID');
            setLoading(false);
            return;
        }

        const fetchAppointmentAndGenerateQR = async () => {
            setLoading(true);
            try {
                const appointmentRef = doc(db, 'appointments', appointmentId);
                const appointmentSnap = await getDoc(appointmentRef);

                if (!appointmentSnap.exists()) {
                    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢');
                }
                
                const appointmentData = { id: appointmentSnap.id, ...appointmentSnap.data() };
                setAppointment(appointmentData);
                setPaymentStatus(appointmentData.paymentInfo?.paymentStatus || 'unpaid');

                // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
                if (appointmentData.paymentInfo?.paymentStatus === 'paid') {
                    setLoading(false);
                    return;
                }

                const PROMPTPAY_ID = process.env.NEXT_PUBLIC_PROMPTPAY_ID; 
                if (!PROMPTPAY_ID) {
                    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö');
                }

                const amount = appointmentData.paymentInfo.totalPrice;
                const dataUrl = await generateQrCodePayload(PROMPTPAY_ID, amount);
                setQrCodeDataUrl(dataUrl);

            } catch (err) {
                setError(err.message);
                console.error('Error:', err);
            } finally {
                setLoading(false);
            }
        };

        fetchAppointmentAndGenerateQR();
    }, [appointmentId]);

    const handlePaymentConfirmation = async () => {
        if (!liff || !profile || !appointment) {
            setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô LINE');
            return;
        }

        setIsProcessing(true);
        try {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            const result = await updatePaymentStatus(appointmentId, 'paid', {
                paidAt: new Date(),
                paidBy: profile.userId,
                paymentMethod: 'promptpay'
            });

            if (result.success) {
                setPaymentStatus('paid');
                
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö LINE OA
                if (liff.isInClient()) {
                    try {
                        await liff.sendMessages([
                            {
                                type: 'text',
                                text: `‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\nüí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${appointment.paymentInfo.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó\nüìù ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: ${appointmentId.substring(0, 6).toUpperCase()}\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!`
                            }
                        ]);
                    } catch (msgError) {
                        console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ:', msgError);
                    }
                }
                
                // ‡∏õ‡∏¥‡∏î LIFF ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                setTimeout(() => {
                    if (liff && liff.closeWindow) {
                        liff.closeWindow();
                    }
                }, 2000);
            } else {
                throw new Error(result.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ');
            }
        } catch (err) {
            setError(err.message);
            console.error('Error updating payment:', err);
        } finally {
            setIsProcessing(false);
        }
    };

    const handleCancel = () => {
        if (liff && liff.closeWindow) {
            liff.closeWindow();
        }
    };

    if (liffLoading || loading) {
        return (
            <div className="text-center p-10">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
                <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <div className="text-red-600 text-lg font-semibold mb-2">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</div>
                <p className="text-red-500 mb-4">{error}</p>
                <button 
                    onClick={handleCancel}
                    className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700"
                >
                    ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
                </button>
            </div>
        );
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    if (paymentStatus === 'paid') {
        return (
            <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
                <div className="text-green-600 text-6xl mb-4">‚úÖ</div>
                <h2 className="text-2xl font-bold text-green-800 mb-2">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</h2>
                <p className="text-green-700 mb-4">
                    ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: {appointment?.paymentInfo.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                </p>
                <p className="text-green-600 text-sm mb-6">
                    ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                </p>
                <button 
                    onClick={handleCancel}
                    className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700"
                >
                    ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
                </button>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-lg p-6 text-center">
                <h1 className="text-2xl font-bold text-gray-800 mb-2">‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</h1>
                <p className="text-sm text-gray-500 mb-4">
                    ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: {appointment?.id.substring(0, 8).toUpperCase()}
                </p>
                
                {/* Service Details */}
                <div className="bg-gray-50 rounded-lg p-4 mb-6 text-left">
                    <h3 className="font-semibold text-gray-800 mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</h3>
                    <div className="space-y-1 text-sm text-gray-600">
                        <div className="flex justify-between">
                            <span>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å:</span>
                            <span>{appointment?.serviceInfo.name}</span>
                        </div>
                        <div className="flex justify-between">
                            <span>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏Å:</span>
                            <span>{appointment?.paymentInfo.basePrice?.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                        </div>
                        {appointment?.paymentInfo.addOnsTotal > 0 && (
                            <div className="flex justify-between">
                                <span>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°:</span>
                                <span>{appointment?.paymentInfo.addOnsTotal?.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                            </div>
                        )}
                        <hr className="my-2"/>
                        <div className="flex justify-between font-semibold text-gray-800">
                            <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</span>
                            <span>{appointment?.paymentInfo.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                        </div>
                    </div>
                </div>

                <div className="my-6">
                    <p className="text-gray-600 mb-2">‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
                    <p className="text-3xl font-bold text-green-600">
                        {appointment?.paymentInfo.totalPrice.toLocaleString()}
                        <span className="text-lg font-medium ml-1">‡∏ö‡∏≤‡∏ó</span>
                    </p>
                </div>

                {qrCodeDataUrl && (
                    <div className="flex justify-center my-6">
                         <Image 
                            src={qrCodeDataUrl} 
                            alt="PromptPay QR Code" 
                            width={250} 
                            height={250} 
                            className="border-2 border-gray-200 rounded-lg shadow-md"
                         />
                    </div>
                )}

                <p className="text-gray-600 text-sm mb-6">
                    ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ True Money Wallet
                </p>
            </div>

            {/* Action Buttons */}
            <div className="space-y-3">
                <button
                    onClick={handlePaymentConfirmation}
                    disabled={isProcessing}
                    className="w-full bg-green-600 text-white py-4 rounded-lg font-semibold hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                >
                    {isProcessing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}
                </button>

                <button
                    onClick={handleCancel}
                    className="w-full bg-gray-500 text-white py-3 rounded-lg font-semibold hover:bg-gray-600"
                >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <p className="text-yellow-800 text-sm">
                    üí° <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" 
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö
                </p>
            </div>
        </div>
    );
}

// Main component that wraps PaymentContent with Suspense
export default function PaymentPage() {
    return (
        <Suspense fallback={
            <div className="text-center p-10">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
                <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
            </div>
        }>
            <PaymentContent />
        </Suspense>
    );
}